// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	models "server/db/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// FinderPeople is an autogenerated mock type for the FinderPeople type
type FinderPeople struct {
	mock.Mock
}

// AllPeople provides a mock function with given fields:
func (_m *FinderPeople) GetAllPeople() []*models.Person {
	ret := _m.Called()

	var r0 []*models.Person
	if rf, ok := ret.Get(0).(func() []*models.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Person)
		}
	}

	return r0
}

// FindPeopleByNames provides a mock function with given fields: firstName, lastName
func (_m *FinderPeople) FindPeopleByNames(firstName string, lastName string) []*models.Person {
	ret := _m.Called(firstName, lastName)

	var r0 []*models.Person
	if rf, ok := ret.Get(0).(func(string, string) []*models.Person); ok {
		r0 = rf(firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Person)
		}
	}

	return r0
}

// FindPeopleByPhoneNumber provides a mock function with given fields: phoneNumber
func (_m *FinderPeople) FindPeopleByPhoneNumber(phoneNumber string) []*models.Person {
	ret := _m.Called(phoneNumber)

	var r0 []*models.Person
	if rf, ok := ret.Get(0).(func(string) []*models.Person); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Person)
		}
	}

	return r0
}

// FindPersonByID provides a mock function with given fields: id
func (_m *FinderPeople) FindPersonByID(id uuid.UUID) (*models.Person, error) {
	ret := _m.Called(id)

	var r0 *models.Person
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewFinderPeopleT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFinderPeople creates a new instance of FinderPeople. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFinderPeople(t NewFinderPeopleT) *FinderPeople {
	mock := &FinderPeople{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
