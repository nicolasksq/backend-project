// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "server/api/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// PeopleGetter is an autogenerated mock type for the PeopleGetter type
type PeopleGetter struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *PeopleGetter) GetAll() []*entities.Person {
	ret := _m.Called()

	var r0 []*entities.Person
	if rf, ok := ret.Get(0).(func() []*entities.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Person)
		}
	}

	return r0
}

// GetByFields provides a mock function with given fields: firstname, lastname, phoneNumber
func (_m *PeopleGetter) GetByFields(firstname string, lastname string, phoneNumber string) ([]*entities.Person, error) {
	ret := _m.Called(firstname, lastname, phoneNumber)

	var r0 []*entities.Person
	if rf, ok := ret.Get(0).(func(string, string, string) []*entities.Person); ok {
		r0 = rf(firstname, lastname, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(firstname, lastname, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PeopleGetter) GetByID(id uuid.UUID) (*entities.Person, error) {
	ret := _m.Called(id)

	var r0 *entities.Person
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPeopleGetterT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPeopleGetter creates a new instance of PeopleGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPeopleGetter(t NewPeopleGetterT) *PeopleGetter {
	mock := &PeopleGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
